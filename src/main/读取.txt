prepareRefresh();// 准备刷新上下文环境

ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); //初始化BeanFactory

prepareBeanFactory(beanFactory); //对BeanFactory进行功能填充

try {
    postProcessBeanFactory(beanFactory); //让子类注册BeanPostProcessors（bean定义已完成加载,已初始化，但还未示例化）
                                            spring的开放式架构，很容易根据业务需要扩展已经存在的功能，

    invokeBeanFactoryPostProcessors(beanFactory); //激活BeanFactory的处理器，即PostProcessors

    registerBeanPostProcessors(beanFactory); //注册BeanPostProcessors，在getBean()时被调用

    initMessageSource(); //国际化处理，即不同语言

    initApplicationEventMulticaster(); //初始化应用 消息广播器，放入applicationEventMulticaaster中

    onRefresh(); //子类做的其他工作，  初始化其他Bean

    registerListeners();  //从所有注册的bean中查找listener，并注册到消息广播器

    finishBeanFactoryInitialization(beanFactory); // Instantiate all remaining (non-lazy-init) singletons.

    finishRefresh(); //完成刷新过程，通知生命周期处理器lifecycleProcessor刷新过程，
                        同时发出ContextRefreshEvent通知
}
catch (BeansException ex) {
    if (logger.isWarnEnabled()) {
        logger.warn("Exception encountered during context initialization - " +
                "cancelling refresh attempt: " + ex);
    }

    // Destroy already created singletons to avoid dangling resources.
    destroyBeans();

    // Reset 'active' flag.
    cancelRefresh(ex);

    // Propagate exception to caller.
    throw ex;
}