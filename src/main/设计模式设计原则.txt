一：把可变的部分抽取（封装）出来，不要和那些不需要变化的混在一起，那么其他部分就不会受到影响
   以后便可以轻易修改和扩展而不影响现有代码；
二：面向接口编程，而不是针对实现编程，可以在"运行时"动态地改变行为（利用了多态特性），不用理会执行时的真正对象是谁；
三：多用组合，少用继承
四：为了交互对象之间的松耦合而设计；能让我们设计有弹性的OO系统，因为对象之间的相互依赖降到了最低。
五：类应该对扩展开放，对修改关闭。



策略模式：定义了算法族，分别封装起来，它们之间可以互相替换，让算法的变化独立于使用算法的客户。

观察者模式：定义了对象之间的一（主题Subject）对多（观察者）关系，这样，当主题的状态发生改变时，其他依赖者都会收到通知。
    改变主题或者观察者中的任意一个，都不会对另一方产生影响，因为是松耦合的。有新的观察者类型时，不需要修改主题的代码。。

装饰者模式：动态地将责任附加到对象上，如果需要扩展，则比继承更具有弹性。（装饰者可以在被装饰者行为之前/之后加上自己的行为，以达到特定的目的）